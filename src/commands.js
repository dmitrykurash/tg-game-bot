import { getGameState, setGameState, addHistory, getHistory, generateSituation, clearGameState, getStats } from './gameLogic.js';
import logger from './logger.js';
import { removeAsterisks, removeUsernames, formatStatsPretty } from './utils.js';
import { logBotAction } from './bot.js';

const INSTRUCTION_TEXT = `–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n‚Äî –Ø –≤–µ–¥—É—â–∏–π –≤–∞—à–µ–π –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.\n‚Äî –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start.\n‚Äî –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–∏—Ö —Ä–µ–ø–ª–∞–µ–º (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî —Ç–∞–∫ –≤–∞—à –≥–æ–ª–æ—Å –±—É–¥–µ—Ç —É—á—Ç—ë–Ω.\n‚Äî –î–ª—è –ª–∏—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ –º–Ω–æ–π ‚Äî —É–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è —á–µ—Ä–µ–∑ @ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –º–æ–π –æ—Ç–≤–µ—Ç.\n‚Äî –Ø –Ω–µ –≤–º–µ—à–∏–≤–∞—é—Å—å –≤ –≤–∞—à–∏ –æ–±—ã—á–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã —è–≤–Ω–æ –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫–æ –º–Ω–µ.\n‚Äî –°—Ç–∞—Ç—ã –±–∞–Ω–¥—ã (–∫–∞—Å—Å–∞, —Ä–µ–ø—É—Ç–∞—Ü–∏—è –∏ –¥—Ä.) –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Å—é–∂–µ—Ç.\n‚Äî –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ /restart –∏–ª–∏ –º–µ–Ω—é.\n\n–í—Å—ë –ø—Ä–æ—Å—Ç–æ, –±—Ä–∞—Ç–≤–∞! –ü–æ–≥–Ω–∞–ª–∏!`;

export function setupCommands(bot) {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    logger.info(`[${chatId}] /start by ${msg.from.username}`);
    bot.sendMessage(chatId, INSTRUCTION_TEXT);
    const state = JSON.stringify({});
    await setGameState(chatId, state, 1, Date.now());
    const stats = await getStats(chatId);
    const situation = await generateSituation([], stats);
    await addHistory(chatId, situation);
    logBotAction('–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏', { chatId, situation: removeAsterisks(removeUsernames(situation)) });
    bot.sendMessage(chatId, `–í–∞–π, –±—Ä–∞—Ç–≤–∞! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é!\n\n${removeAsterisks(removeUsernames(situation))}`);
    bot.sendMessage(chatId, formatStatsPretty(stats), { parse_mode: 'HTML' });
  });

  bot.onText(/\/history/, async (msg) => {
    const chatId = msg.chat.id;
    logger.info(`[${chatId}] /history by ${msg.from.username}`);
    const history = await getHistory(chatId, 10);
    if (!history.length) return bot.sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –±—Ä–∞—Ç.');
    const text = history.map(e => `‚Ä¢ ${e.event}`).join('\n\n');
    bot.sendMessage(chatId, `10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π:\n\n${text}`);
  });

  bot.onText(/\/relationships/, async (msg) => {
    const chatId = msg.chat.id;
    logger.info(`[${chatId}] /relationships by ${msg.from.username}`);
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏ –≤—Ä–∞–≥–æ–≤
    bot.sendMessage(chatId, '–°–æ—é–∑–Ω–∏–∫–∏ –∏ –≤—Ä–∞–≥–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è, –±—Ä–∞—Ç.');
  });

  bot.onText(/\/restart/, async (msg) => {
    const chatId = msg.chat.id;
    logger.info(`[${chatId}] /restart by ${msg.from.username}`);
    await clearGameState(chatId);
    const state = JSON.stringify({});
    await setGameState(chatId, state, 1, Date.now());
    const stats = await getStats(chatId);
    const situation = await generateSituation([], stats);
    await addHistory(chatId, situation);
    logBotAction('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é', { chatId });
    bot.sendMessage(chatId, `–í–∞–π, –±—Ä–∞—Ç–≤–∞! –í—Å—ë –ø–æ –Ω–æ–≤–æ–π! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é!\n\n${removeAsterisks(removeUsernames(situation))}`);
    bot.sendMessage(chatId, formatStatsPretty(stats), { parse_mode: 'HTML' });
  });

  bot.onText(/\/next/, async (msg) => {
    const chatId = msg.chat.id;
    logger.info(`[${chatId}] /next by ${msg.from.username}`);
    const history = await getHistory(chatId, 10);
    const stats = await getStats(chatId);
    const situation = await generateSituation(history.reverse(), stats);
    await addHistory(chatId, situation);
    logBotAction('–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏', { chatId, situation: removeAsterisks(removeUsernames(situation)) });
    bot.sendMessage(chatId, `–í–∞–π, –±—Ä–∞—Ç–≤–∞! –í–æ—Ç –Ω–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!\n\n${removeAsterisks(removeUsernames(situation))}`);
    bot.sendMessage(chatId, formatStatsPretty(stats), { parse_mode: 'HTML' });
  });

  bot.onText(/\/menu/, async (msg) => {
    const chatId = msg.chat.id;
    logger.info(`[${chatId}] /menu by ${msg.from.username}`);
    logBotAction('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é', { chatId, text: msg.text });
    bot.sendMessage(chatId, '–ú–µ–Ω—é:', {
      reply_markup: {
        keyboard: [
          [{ text: 'üìú –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è', web_app: { url: `https://tg-game-bot-production.up.railway.app/miniapp.html?chatId=${chatId}` } }],
          ['–°—Ç–∞—Ç—ã'],
          ['–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
  });

  bot.onText(/\/instructions/, async (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, INSTRUCTION_TEXT);
  });

  bot.onText(/\/miniapp/, async (msg) => {
    const chatId = msg.chat.id;
    logger.info(`[${chatId}] /miniapp by ${msg.from.username}`);
    logBotAction('–í—ã–∑–æ–≤ /miniapp', { chatId });
    const url = `https://tg-game-bot-production.up.railway.app/miniapp.html?chatId=${chatId}`;
    bot.sendMessage(chatId, '–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üìú –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è',
            web_app: { url }
          }
        ]]
      }
    });
  });

  bot.on('message', async (msg) => {
    if (!msg.text) return;
    const chatId = msg.chat.id;
    if (msg.text.startsWith('/') && msg.text.includes('@')) return;
    if (msg.text === '–°—Ç–∞—Ç—ã') {
      const stats = await getStats(chatId);
      logBotAction('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É', { chatId, stats });
      bot.sendMessage(chatId, formatStatsPretty(stats), { parse_mode: 'HTML' });
    } else if (msg.text === '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å') {
      logger.info(`[${chatId}] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é`);
      await clearGameState(chatId);
      const state = JSON.stringify({});
      await setGameState(chatId, state, 1, Date.now());
      const stats = await getStats(chatId);
      const situation = await generateSituation([], stats);
      await addHistory(chatId, situation);
      logBotAction('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é', { chatId });
      bot.sendMessage(chatId, `–í–∞–π, –±—Ä–∞—Ç–≤–∞! –í—Å—ë –ø–æ –Ω–æ–≤–æ–π! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é!\n\n${removeAsterisks(removeUsernames(situation))}`);
      bot.sendMessage(chatId, formatStatsPretty(stats), { parse_mode: 'HTML' });
    }
  });
} 